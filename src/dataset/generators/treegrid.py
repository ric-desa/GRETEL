import networkx as nx
import numpy as np

from dgl.data import TreeGridDataset

from src.dataset.generators.base import Generator
from src.dataset.instances.graph import GraphInstance

class TreeGrid(Generator):
    '''
    DGL dataset: https://docs.dgl.ai/en/0.8.x/generated/dgl.data.TreeGridDataset.html#treegriddataset

    TREE-GRIDS dataset from GNNExplainer: Generating Explanations for Graph Neural Networks (https://arxiv.org/abs/1903.03894)
    This is a synthetic dataset for node classification. It is generated by performing the following steps in order.
    - Construct a balanced binary tree as the base graph.
    - Construct a set of n-by-n grid motifs.
    - Attach the motifs to randomly selected nodes of the base graph.
    - Perturb the graph by adding random edges.
    - Generate constant feature for all nodes, which is 1.
    - Nodes in the tree belong to class 0 and nodes in grids belong to class 1.
    '''
    def init(self):
        self.num_instances = self.local_config['parameters']['num_instances']
        self.tree_height = self.local_config['parameters'].get('tree_height', 5)
        self.num_motifs = self.local_config['parameters'].get('num_motifs', 10)
        self.grid_size = self.local_config['parameters'].get('grid_size', 3)
        self.perturb_ratio = self.local_config['parameters'].get('perturb_ratio', 0.1)

        assert ((isinstance(self.num_instances, float) or isinstance(self.num_instances, int)) and self.num_instances >= 1)
        assert ((isinstance(self.tree_height, float) or isinstance(self.tree_height, int)) and self.tree_height >= 1)
        assert ((isinstance(self.num_motifs, float) or isinstance(self.num_motifs, int)) and self.num_motifs >= 1) 
        assert ((isinstance(self.grid_size, float) or isinstance(self.grid_size, int)) and self.grid_size >= 1)
        assert ((isinstance(self.perturb_ratio, float) or isinstance(self.perturb_ratio, int)) and self.perturb_ratio >= 0) 

        self.generate_dataset()

    def check_configuration(self):
        super().check_configuration()
        local_config = self.local_config

        # set defaults
        local_config['parameters']['num_instances'] = local_config['parameters'].get('num_instances', 100)
        local_config['parameters']['tree_height'] = local_config['parameters'].get('tree_height', 5)
        local_config['parameters']['num_motifs'] = local_config['parameters'].get('num_motifs', 10)
        local_config['parameters']['grid_size'] = local_config['parameters'].get('grid_size', 3)
        local_config['parameters']['perturb_ratio'] = local_config['parameters'].get('perturb_ratio', 0.1)

    def generate_dataset(self):   
                  
        for i in range(self.num_instances):
            
            # Randomly determine if the graph is going to contain an infinity-shaped cycle
            grid_flag = np.random.randint(0, 2)  # 2 excluded

            if grid_flag:
                # Load TreeGridDataset instance from DGL
                self.dgl_dataset = TreeGridDataset(
                    tree_height=self.tree_height,
                    num_motifs=self.num_motifs,
                    grid_size=self.grid_size,
                    perturb_ratio=self.perturb_ratio,
                    seed=i,
                    raw_dir=None,
                    force_reload=True, # Reload instead of using cached files
                    verbose=False,
                    transform=None)
                
                graph = self.dgl_dataset[0] # DGL generated dataset consists of one graph only
                
                adj_matrix = graph.adjacency_matrix().to_dense().numpy() # Convert DGL sparse graph to dense adjacency matrix
                
                label = 1 # Graph contains a grid
                features = graph.ndata['feat'].numpy()

            else:
                # print(f"self.tree_height: {self.tree_height}")
                # print(f"self.num_motifs: {self.num_motifs}")
                # print(f"self.grid_size: {self.grid_size}")
                # n = 2**(self.tree_height+1) - 1 # + self.num_motifs * self.grid_size
                n = 2**(self.tree_height+1) - 1 # Building a base binary tree with n nodes 
                # print("n:", n)             
                adj_matrix = nx.to_numpy_array(nx.random_tree(n=n))
                # print(f"adj_matrix.sum(): {adj_matrix.sum()}")
                label = 0 # Graph is a random tree
                features = np.ones(n)

            self.dataset.instances.append(GraphInstance(id=i, data=adj_matrix, label=label, node_features=features))
            # self.dataset.instances.append(GraphInstance(id=i, data=adj_matrix, label=label))

            self.context.logger.info(f"Generated instance with id {i} and label={label}")
    
    
    def get_num_instances(self):
        return len(self.dataset.instances)
    
    